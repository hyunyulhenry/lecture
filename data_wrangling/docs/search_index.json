[
["index.html", "R을 이용한 데이터 랭글링 Welcome", " R을 이용한 데이터 랭글링 이현열 2020-02-02 Welcome R을 이용한 데이터 랭글링 "],
["numbers.html", "Chapter 1 Numbers 1.1 integer와 double의 vector 만들기 1.2 비임의(Non-random) 숫자 생성하기 1.3 임의(Random) 숫자 생성하기 1.4 반올림", " Chapter 1 Numbers R에서 숫자 형태는 크게 integer와 double로 나눌 수 있습니다. 이 중 integer는 정수를 의미하며, double은 부동소수점 실수를 의미합니다. 1.1 integer와 double의 vector 만들기 먼저 double 형태의 벡터를 만듭니다. dbl_var = c(1, 2.5, 4.5) dbl_var ## [1] 1.0 2.5 4.5 숫자 뒤에 L을 붙이면 integer(정수) 형태로 입력됩니다. int_var = c(1L, 6L, 10L) int_var ## [1] 1 6 10 1.1.1 둘 간의 형태 바꾸기 as.*() 함수를 이용해 각 데이터의 형태(Type)을 바꿀 수 있습니다. as.double(int_var) ## [1] 1 6 10 # as.numeric(int_var) as.double() 함수를 통해 integer 형태를 double 형태로 바꿀 수 있습니다. as.numeric() 함수는 as.double()과 동일한 역할을 합니다. as.integer(dbl_var) ## [1] 1 2 4 as.integer() 함수를 통해 double 형태를 integer 형태로 바꿀 수 있습니다. 소수점이 사라지고 정수형태로 바뀌었습니다. 1.2 비임의(Non-random) 숫자 생성하기 콜론(:)과 c() 함수를 통해 순서가 있는 숫자 벡터를 생성할 수 있습니다. 1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 콜론을 통해 1에서 10까지 숫자가 생성됩니다. c(1, 5, 10) ## [1] 1 5 10 c() 함수 내부에 입력한 숫자로 벡터가 생성됩니다. 1.2.1 seq() 함수 이용 seq() 함수를 이용할 경우 더욱 다양하게 숫자 벡터를 생성할 수 있습니다. seq(from = 1, to = 21, by = 2) ## [1] 1 3 5 7 9 11 13 15 17 19 21 from에는 시작 숫자, to에는 종료 숫자, by에는 간격을 입력합니다. 즉 1에서 21까지 2 단위로 숫자가 생성됩니다. seq(0, 21, length.out = 15) ## [1] 0.0 1.5 3.0 4.5 6.0 7.5 9.0 10.5 12.0 13.5 15.0 16.5 18.0 19.5 21.0 인자에 length.out을 쓸 경우 from에서 to까지 동일한 증가폭으로 15개의 숫자를 생성합니다. rep(1: 4) ## [1] 1 2 3 4 rep() 함수 역시 seq() 함수와 비슷한 역할을 합니다. rep(1:4, times = 2) ## [1] 1 2 3 4 1 2 3 4 times 인자를 추가해줄 경우, 해당 숫자만큼 반복되어 벡터가 생성됩니다. rep(1:4, each = 2) ## [1] 1 1 2 2 3 3 4 4 each 인자를 추가할 경우, 각 숫자를 n번 반복하여 벡터가 생성됩니다. 1.3 임의(Random) 숫자 생성하기 이번에는 임의의 숫자를 생성하는 방법에 대해 알아보겠습니다. 1.3.1 Uniform Numbers 균등 분포(Uniform distribution)에서 임의의 숫자를 생성하기 위해서는 runif() 함수를 사용합니다. runif(5) ## [1] 0.2876 0.7883 0.4090 0.8830 0.9405 기본적으로 runif() 함수는 0과 1사이에서 임의의 숫자를 생성하며, 괄호 안에 입력된 숫자만큼의 갯수의 난수를 생성합니다. runif(5, min = 0, max = 25) ## [1] 1.139 13.203 22.310 13.786 11.415 min과 max인자를 추가할 경우 해당 값 사이에서 난수를 생성합니다. sample() 함수 역시 Uniform Number를 생성할 수 있습니다. sample(0:25, 10, replace = TRUE) ## [1] 19 13 21 24 25 4 18 24 24 8 0에서 25까지 숫자중에서 10개의 숫자를 선택하며, replace를 TRUE로 할 경우 복원추출, FALSE로 할 경우 비복원추출을 시행합니다. 1.3.2 Non-Uniform Numbers 비균등 확률 분포에서 난수를 생성하기 위해서는 크게 4가지 함수가 있습니다. r*: 난수 생성 d*: 밀도(Density) 혹은 확률 질량 함수(Probability mass function) p*: 누적 분포(Cumulative distribution) q*: 분위수(Quantile) 1.3.2.1 정규 분포(Normal Distribution) R에서 정규 분포 관련 함수는 *norm() 입니다. rnorm(10, mean = 0, sd = 1) ## [1] 0.4008 0.1107 -0.5558 1.7869 0.4979 -1.9666 0.7014 -0.4728 -1.0678 ## [10] -0.2180 rnorm() 함수를 이용하여 평균이 0, 표준편차가 1인 정규분포 함수에서 난수 10개를 생성합니다. dnorm(0, mean = 0, sd = 1) ## [1] 0.3989 d = 0인 지점의 밀도를 계산합니다. pnorm(0, mean = 0, sd = 1) ## [1] 0.5 d = 0인 지점의 누적 분포를 구합니다. qnorm(0.5, mean = 0, sd = 1) ## [1] 0 누적 분포가 0.5인 지점의 분위수를 구합니다. 1.3.2.2 기타 분포 정규 분포 외에도 여러 분포에서 난수를 생성할 수 있습니다. 각 함수별 인자는 help()를 통해 확인할 수 있습니다. 이항 분포: rbinom, dbinom, pbinom, qbinom 푸아송 분포: rpois, dpois, ppois, qpois 지수 분포: rexp, dexp, pexp, qexp 감마 분포: rgamma, dgamma, pgamma, qgamma 1.4 반올림 숫자의 올림, 내림, 반올림 등을 실행합니다. 먼저 다음과 같이 숫자를 입력합니다. x = c(1, 1.35, 1.7, 2.05, 2.4, 2.75, 3.1, 3.45, 3.8, 4.15, 4.5, 4.85, 5.2, 5.55, 5.9) round(x) ## [1] 1 1 2 2 2 3 3 3 4 4 4 5 5 6 6 round() 함수는 가장 가까운 정수로 반올림을 합니다. round(x, digits = 2) ## [1] 1.00 1.35 1.70 2.05 2.40 2.75 3.10 3.45 3.80 4.15 4.50 4.85 5.20 5.55 5.90 함수 내부에 digits 인자를 추가해 줄 경우, 해당 자리수 만큼 반올림을 합니다. ceiling(x) ## [1] 1 2 2 3 3 3 4 4 4 5 5 5 6 6 6 ceiling() 함수는 올림을 실행합니다. floor(x) ## [1] 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 floor() 함수는 내림을 실행합니다. "],
["character-strings.html", "Chapter 2 Character Strings 2.1 문자열 기본 2.2 문자열 출력 2.3 문자열 갯수 확인 2.4 stringr 패키지를 이용한 문자열 다루기", " Chapter 2 Character Strings 문자열은 R의 기본함수 및stringr 패키지를 이용해 쉽게 다룰 수 있습니다. 2.1 문자열 기본 a = &#39;learning to create&#39; b = &#39;character strings&#39; paste(a, b) ## [1] &quot;learning to create character strings&quot; paste() 함수를 이용해 두 문자를 붙일 수 있습니다. paste(&#39;pi is&#39;, pi) ## [1] &quot;pi is 3.14159265358979&quot; R에서 pi는 숫자로 입력되어 있으며, paste() 함수를 통해 문자열과 숫자를 붙일수도 있습니다. paste(&#39;I&#39;, &#39;love&#39;, &#39;R&#39;, sep = &#39;-&#39;) ## [1] &quot;I-love-R&quot; sep 인자를 추가할 경우, 각 단어를 구분하는 문자를 입력할 수 있습니다. paste0(&#39;I&#39;, &#39;love&#39;, &#39;R&#39;) ## [1] &quot;IloveR&quot; paste0() 함수는 구분 문자가 없이 결합됩니다. 2.2 문자열 출력 문자를 출력하는데 다음과 같은 함수가 있습니다. print(): 기본적인 출력 함수 noquote(): 쿼트(&quot;&quot;) 생략 cat(): 문자열 결합 및 쿼트 생략 x = &#39;learning to print strings&#39; print(x) ## [1] &quot;learning to print strings&quot; print(x, quote = &#39;FALSE&#39;) ## [1] learning to print strings print() 함수를 이용해 기본적인 출력을 할 수 있으며, quote 인자를 FALSE로 지정하여 쿼트를 생략할 수도 있습니다. noquote(x) ## [1] learning to print strings noquote() 함수를 이용할 경우 쿼트가 출력되지 않습니다. cat(x) ## learning to print strings cat(x, &#39;in R&#39;) ## learning to print strings in R cat() 함수를 이용할 경우도 출력이 가능하며, 여러 문자를 결합한 뒤 출력하는 것 또한 가능합니다. 2.3 문자열 갯수 확인 x = &#39;How many elements are in this string?&#39; length(x) ## [1] 1 length() 함수의 경우 element의 갯수를 세므로, 1이 출력됩니다. nchar(x) ## [1] 37 반면 nchar() 함수를 이용하여 문장 내 문자의 갯수를 셀 수 있습니다. 2.4 stringr 패키지를 이용한 문자열 다루기 R의 기본함수를 이용하여도 문자열을 다룰 수 있지만, stringr 패키지를 이용할 경우 더욱 작업을 수행할 수 있습니다. 2.4.1 기본 사용법 library(stringr) str_c(&#39;Learning&#39;, &#39;to&#39;, &#39;use&#39;, &#39;the&#39;, &#39;stringr&#39;, &#39;package&#39;) ## [1] &quot;Learningtousethestringrpackage&quot; str_c() 함수는 paste0()와 기능이 동일합니다. library(stringr) str_c(&#39;Learning&#39;, &#39;to&#39;, &#39;use&#39;, &#39;the&#39;, &#39;stringr&#39;, &#39;package&#39;, sep = &#39; &#39;) ## [1] &quot;Learning to use the stringr package&quot; sep 인자를 통해 구분자를 추가할 수 있으며, 이는 paste()와 동일합니다. text = c(&#39;Learning&#39;, &#39;to&#39;, NA, &#39;use&#39;, &#39;the&#39;, NA, &#39;stringr&#39;, &#39;package&#39;) str_length(text) ## [1] 8 2 NA 3 3 NA 7 7 str_length() 함수는 문자의 갯수를 셉니다. x = &#39;Learning to use the stringr package&#39; str_sub(x, start = 1, end = 15) ## [1] &quot;Learning to use&quot; str_sub() 함수는 start부터 end까지의 문자를 출력합니다. str_sub(x, start = -7, end = -1) ## [1] &quot;package&quot; start 혹은 end에 음수를 입력하면, 문장의 맨 끝에서부터 start/end 지점이 계산됩니다. str_dup(&#39;beer&#39;, times = 3) ## [1] &quot;beerbeerbeer&quot; str_dub() 함수를 이용해 특정 문자를 반복되게 출력할 수 있습니다. 2.4.2 공백(Whitespace) 제거 텍스트 데이터를 다룰때는 빈 공백이 따라오는 경우가 많으며, 데이터분석의 편이를 위해 이를 제거해야 합니다. text = c(&#39;Text &#39;, &#39; with&#39;, &#39; whitespace &#39;, &#39; on&#39;, &#39;both &#39;, &#39;sides &#39;) print(text) ## [1] &quot;Text &quot; &quot; with&quot; &quot; whitespace &quot; &quot; on&quot; &quot;both &quot; ## [6] &quot;sides &quot; 각 단어의 좌/우 혹은 양쪽에 공백이 있습니다. str_trim(text, side = &#39;left&#39;) ## [1] &quot;Text &quot; &quot;with&quot; &quot;whitespace &quot; &quot;on&quot; &quot;both &quot; ## [6] &quot;sides &quot; str_trim(text, side = &#39;right&#39;) ## [1] &quot;Text&quot; &quot; with&quot; &quot; whitespace&quot; &quot; on&quot; &quot;both&quot; ## [6] &quot;sides&quot; str_trim(text, side = &#39;both&#39;) ## [1] &quot;Text&quot; &quot;with&quot; &quot;whitespace&quot; &quot;on&quot; &quot;both&quot; ## [6] &quot;sides&quot; str_trim() 함수를 통해 좌/우/양쪽의 공백을 제거할 수 있습니다. 2.4.3 문자열 자리수 채우기 원하는 자리수를 채우기 위해 문자열에 공백 혹은 특정 문자를 입력할 수 있습니다. str_pad(&#39;beer&#39;, width = 10, side = &#39;left&#39;) ## [1] &quot; beer&quot; 10자리를 맞추기 위해 좌측에 공백이 추가되었습니다. str_pad(&#39;beer&#39;, width = 10, side = &#39;left&#39;, pad = &#39;!&#39;) ## [1] &quot;!!!!!!beer&quot; pad 인자를 추가할 경우, 공백이 아닌 해당 문자가 추가됩니다. "],
["factors.html", "Chapter 3 Factors 3.1 팩터 생성 및 탐색 3.2 레벨에 순서 부여하기 3.3 순서 재정의", " Chapter 3 Factors R에서 Factor 형태는 범주형(categorical) 데이터를 다룰때 사용됩니다. 3.1 팩터 생성 및 탐색 gender = factor(c(&#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;)) gender ## [1] male female female male female ## Levels: female male factor() 함수를 통해 팩터를 생성하며, Levels에는 값들의 고유값인 female과 male이 설정되어 있습니다. unclass(gender) ## [1] 2 1 1 2 1 ## attr(,&quot;levels&quot;) ## [1] &quot;female&quot; &quot;male&quot; levels(gender) ## [1] &quot;female&quot; &quot;male&quot; summary(gender) ## female male ## 3 2 female은 1, male은 2의 integer가 매칭되어 있으므로, unclass() 함수를 이용하여 대표값을 출력할 수 있습니다. 또한 levels() 함수를 이용해 레벨을 출력할 수 있으며, summary() 함수를 이용할 경우 각 레벨의 빈도가 출력됩니다. 3.2 레벨에 순서 부여하기 gender = factor(c(&#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;)) gender ## [1] male female female male female ## Levels: female male 레벨을 정의하지 않을 시, 알파벳 순서인 female, male의 순서로 레벨이 정의됩니다. gender = factor(c(&#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;), levels = c(&#39;male&#39;, &#39;female&#39;)) gender ## [1] male female female male female ## Levels: male female 반면 levels 인자를 입력하면, 레벨의 순서가 정의됩니다. ses = c(&#39;low&#39;, &#39;middle&#39;, &#39;low&#39;, &#39;low&#39;, &#39;low&#39;, &#39;low&#39;, &#39;middle&#39;, &#39;low&#39;, &#39;middle&#39;, &#39;middle&#39;, &#39;middle&#39;, &#39;middle&#39;, &#39;middle&#39;, &#39;high&#39;, &#39;high&#39;, &#39;low&#39;, &#39;middle&#39;, &#39;middle&#39;, &#39;low&#39;, &#39;high&#39;) ses = factor(ses, levels = c(&#39;low&#39;, &#39;middle&#39;, &#39;high&#39;), ordered = TRUE) ses ## [1] low middle low low low low middle low middle middle ## [11] middle middle middle high high low middle middle low high ## Levels: low &lt; middle &lt; high 또한 ordered 인자를 TRUE로 지정할 시, levels의 크기도 정의됩니다. 3.3 순서 재정의 library(forcats) fct_recode(ses, small = &#39;low&#39;, medium = &#39;middle&#39;, large = &#39;high&#39;) ## [1] small medium small small small small medium small medium medium ## [11] medium medium medium large large small medium medium small large ## Levels: small &lt; medium &lt; large forcats 패키지의 fct_recode() 함수를 이용해 팩터의 레벨을 재입력 할 수 있습니다. 이 외에도 해당 패키지에는 팩터를 다룰수 있는 다양한 함수가 존재합니다. "],
["date.html", "Chapter 4 Date 4.1 현재 날짜 및 시간 4.2 문자열을 날짜로 변경하기 4.3 날짜 관련 정보 추출 4.4 날짜 순서 생성하기", " Chapter 4 Date 날짜, 시간에 관련된 데이터는 R의 기본함수 및 lubridate 패키지를 이용해 쉽게 다룰 수 있습니다. 4.1 현재 날짜 및 시간 Sys.timezone() ## [1] &quot;Etc/UTC&quot; Sys.Date() ## [1] &quot;2020-02-02&quot; Sys.time() ## [1] &quot;2020-02-02 09:36:55 UTC&quot; 기본 함수를 통해 현재 타임존 및 날짜, 시간을 확인할 수 있습니다. 4.2 문자열을 날짜로 변경하기 x = c(&#39;2015-07-01&#39;, &#39;2015-08-01&#39;, &#39;2015-09-01&#39;) x_date = as.Date(x) str(x_date) ## Date[1:3], format: &quot;2015-07-01&quot; &quot;2015-08-01&quot; &quot;2015-09-01&quot; as.Date() 함수를 이용할 경우, 문자열 형태가 Date로 변경됩니다. y = c(&#39;07/01/2015&#39;, &#39;08/01/2015&#39;, &#39;09/01/2015&#39;) as.Date(y, format = &#39;%m/%d/%Y&#39;) ## [1] &quot;2015-07-01&quot; &quot;2015-08-01&quot; &quot;2015-09-01&quot; YYYY-MM-DD 형태가 아닌 다른 형태로 입력된 경우, format을 직접 입력하여 Date 형태로 변경할 수 있습니다. library(lubridate) ymd(x) ## [1] &quot;2015-07-01&quot; &quot;2015-08-01&quot; &quot;2015-09-01&quot; mdy(y) ## [1] &quot;2015-07-01&quot; &quot;2015-08-01&quot; &quot;2015-09-01&quot; lubridate 패키지를 이용할 경우 YYYY-MM-DD 형태는 ymd(), MM-DD-YYYY 형태는 mdy() 함수를 사용해 손쉽게 Date 형태로 변경할 수 있습니다. 이 외에도 lubridate에는 Date 형태로 변경하기 위한 다양한 함수가 존재합니다. 순서 함수 year, month, day ymd() year, day, month ydm() month, day, year mdy() day, month, year dmy() hour, minute hm() hour, minute, second hms() year, month, day, hour, minute, secod ymd_hms() 4.3 날짜 관련 정보 추출 lubridate 패키지에는 날짜 관련 정보를 추출할 수 있는 다양한 함수가 존재합니다. 정보 함수 Year year() Month month() Week week() Day of year yday() Day of month mday() Day of week wday() Hour hour() Minute minute() Second second() Time zone tz() x = c(&#39;2015-07-01&#39;, &#39;2015-08-01&#39;, &#39;2015-09-01&#39;) year(x) ## [1] 2015 2015 2015 month(x) ## [1] 7 8 9 week(x) ## [1] 26 31 35 year(), month(), week() 함수를 통해 년도, 월, 주 정보를 확인할 수 있습니다. z = &#39;2015-09-15&#39; yday(z) ## [1] 258 mday(z) ## [1] 15 wday(z) ## [1] 3 yday(), mday(), wday() 함수는 각각 해당 년도에서 몇번째 일인지, 해당 월에서 몇번째 일인지, 해당 주에서 몇번째 일인지를 계산합니다. x = ymd(&#39;2015-07-01&#39;, &#39;2015-08-01&#39;, &#39;2015-09-01&#39;) x + years(1) - days(c(2, 9, 21)) ## [1] &quot;2016-06-29&quot; &quot;2016-07-23&quot; &quot;2016-08-11&quot; 날짜에서 년도와 월, 일자를 더하거나 빼는 계산 역시 가능합니다. 4.4 날짜 순서 생성하기 seq() 함수를 이용할 경우 날짜 벡터를 생성할 수도 있습니다. seq(ymd(&#39;2010-01-01&#39;), ymd(&#39;2015-01-01&#39;), by =&#39;years&#39;) ## [1] &quot;2010-01-01&quot; &quot;2011-01-01&quot; &quot;2012-01-01&quot; &quot;2013-01-01&quot; &quot;2014-01-01&quot; ## [6] &quot;2015-01-01&quot; 2010년 1월 1일부터 2015년 1월 1일까지 1년을 기준으로 벡터가 생성됩니다. seq(ymd(&#39;2010-09-01&#39;), ymd(&#39;2010-09-30&#39;), by =&#39;2 days&#39;) ## [1] &quot;2010-09-01&quot; &quot;2010-09-03&quot; &quot;2010-09-05&quot; &quot;2010-09-07&quot; &quot;2010-09-09&quot; ## [6] &quot;2010-09-11&quot; &quot;2010-09-13&quot; &quot;2010-09-15&quot; &quot;2010-09-17&quot; &quot;2010-09-19&quot; ## [11] &quot;2010-09-21&quot; &quot;2010-09-23&quot; &quot;2010-09-25&quot; &quot;2010-09-27&quot; &quot;2010-09-29&quot; 지정 일수만큼 벡터를 생성할 수도 있습니다. "],
["data-structure-basics.html", "Chapter 5 Data Structure Basics 5.1 구조 파악하기", " Chapter 5 Data Structure Basics R의 데이터구조는 크게 벡터, 리스트, 매트릭스, 데이터프레임으로 나누어집니다. (array는 잘 사용되지 않습니다) Dimension Homogeneous Heterogeneous 1D Atomic Vector List 2D Matrix Data frame nD Array Homogenous는 컬럼간 데이터 구조가 같은 경우, Heterogeneous는 다른 경우입니다. 5.1 구조 파악하기 str() 함수를 이용해 각 데이터의 구조(structure)를 파악할 수 있습니다. vector = 1:10 list = list(item1 = 1:10, item2 = LETTERS[1:18]) matrix = matrix(1:12, nrow = 4) df = data.frame(item1 = 1:18, item2 = LETTERS[1:18]) vector ## [1] 1 2 3 4 5 6 7 8 9 10 str(vector) ## int [1:10] 1 2 3 4 5 6 7 8 9 10 list ## $item1 ## [1] 1 2 3 4 5 6 7 8 9 10 ## ## $item2 ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; str(list) ## List of 2 ## $ item1: int [1:10] 1 2 3 4 5 6 7 8 9 10 ## $ item2: chr [1:18] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; ... matrix ## [,1] [,2] [,3] ## [1,] 1 5 9 ## [2,] 2 6 10 ## [3,] 3 7 11 ## [4,] 4 8 12 str(matrix) ## int [1:4, 1:3] 1 2 3 4 5 6 7 8 9 10 ... df ## item1 item2 ## 1 1 A ## 2 2 B ## 3 3 C ## 4 4 D ## 5 5 E ## 6 6 F ## 7 7 G ## 8 8 H ## 9 9 I ## 10 10 J ## 11 11 K ## 12 12 L ## 13 13 M ## 14 14 N ## 15 15 O ## 16 16 P ## 17 17 Q ## 18 18 R str(df) ## &#39;data.frame&#39;: 18 obs. of 2 variables: ## $ item1: int 1 2 3 4 5 6 7 8 9 10 ... ## $ item2: Factor w/ 18 levels &quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,..: 1 2 3 4 5 6 7 8 9 10 ... "],
["vector.html", "Chapter 6 Vector 6.1 벡터 만들기 6.2 벡터에 값 추가하기 6.3 벡터 추출하기", " Chapter 6 Vector 벡터는 R의 가장 기본적인 데이터 구조로써 integer, double, logical, character로 이루어져 있습니다. 6.1 벡터 만들기 vec_integer = 8:17 vec_integer ## [1] 8 9 10 11 12 13 14 15 16 17 vec_double = c(0.5, 0.6, 0.2) vec_double ## [1] 0.5 0.6 0.2 vec_logical = c(TRUE, FALSE, FALSE) vec_logical ## [1] TRUE FALSE FALSE vec_char = c(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;) vec_char ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; c(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, 1, 2, 3) ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;1&quot; &quot;2&quot; &quot;3&quot; 숫자와 문자가 같이 벡터로 묶일 경우, 숫자는 모두 문자 형태로 변경됩니다. c(1, 2, 3, TRUE, FALSE) ## [1] 1 2 3 1 0 숫자와 논리값(Logical: TRUE/FALSE)이 같이 묶일 경우 TRUE는 1, FALSE는 0으로 치환된 후 숫자 형태로 변경됩니다. c(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, TRUE, FALSE) ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;TRUE&quot; &quot;FALSE&quot; 문자와 논리값이 같이 묶일 경우 모두 문자 형태로 변경됩니다. 6.2 벡터에 값 추가하기 v1 = 8:17 c(v1, 18:22) ## [1] 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 c() 함수를 이용해 기존 벡터에 새로운 값을 추가할 수 있습니다. 6.3 벡터 추출하기 대괄호([])을 이용해 원하는 부분의 데이터를 추출할 수 있습니다. v1 ## [1] 8 9 10 11 12 13 14 15 16 17 v1[2] ## [1] 9 v1[2:4] ## [1] 9 10 11 v1[c(2, 4, 6, 8)] ## [1] 9 11 13 15 v1[c(2, 2, 4)] ## [1] 9 9 11 대괄호 안에 숫자를 입력시, 벡터에서 해당 순서의 데이터가 추출됩니다. v1[-1] ## [1] 9 10 11 12 13 14 15 16 17 v1[-c(2, 4, 6, 8)] ## [1] 8 10 12 14 16 17 마이너스 기호를 입력 시, 해당 순서를 제외한 데이터가 추출됩니다. v1[v1 &lt; 12] ## [1] 8 9 10 11 v1[v1 &lt; 12 | v1 &gt; 15] ## [1] 8 9 10 11 16 17 대괄호 내부에 조건을 설정하여 데이터를 추출할 수도 있습니다. "],
["list.html", "Chapter 7 List 7.1 리스트 생성하기 7.2 기존 리스트에 데이터 추가하기 7.3 리스트 추출하기", " Chapter 7 List List 형태는 항목(Element) 간 타입이나 길이가 달라도 데이터가 결합할 수 있습니다. 7.1 리스트 생성하기 l = list(1:3, &#39;a&#39;, c(TRUE, FALSE, TRUE), c(2.5, 4.2)) str(l) ## List of 4 ## $ : int [1:3] 1 2 3 ## $ : chr &quot;a&quot; ## $ : logi [1:3] TRUE FALSE TRUE ## $ : num [1:2] 2.5 4.2 첫번째 리스트는 정수, 두번째는 문자, 세번째는 논리값, 네번째는 숫자로 이루어져 있습니다. l = list(1:3, list(letters[1:5], c(TRUE, FALSE, TRUE))) str(l) ## List of 2 ## $ : int [1:3] 1 2 3 ## $ :List of 2 ## ..$ : chr [1:5] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; ... ## ..$ : logi [1:3] TRUE FALSE TRUE 또한 리스트 내에 리스트를 생성하는 것 역시 가능합니다. 7.2 기존 리스트에 데이터 추가하기 l1 = list(1:3, &#39;a&#39;, c(TRUE, FALSE, TRUE)) str(l1) ## List of 3 ## $ : int [1:3] 1 2 3 ## $ : chr &quot;a&quot; ## $ : logi [1:3] TRUE FALSE TRUE l2 = append(l1, list(c(2.5, 4.2))) str(l2) ## List of 4 ## $ : int [1:3] 1 2 3 ## $ : chr &quot;a&quot; ## $ : logi [1:3] TRUE FALSE TRUE ## $ : num [1:2] 2.5 4.2 append() 함수를 이용해 기존 리스트에 추가로 리스트를 붙일 수 있습니다. l2$item4 = &#39;new list item&#39; str(l2) ## List of 5 ## $ : int [1:3] 1 2 3 ## $ : chr &quot;a&quot; ## $ : logi [1:3] TRUE FALSE TRUE ## $ : num [1:2] 2.5 4.2 ## $ item4: chr &quot;new list item&quot; 또한 기존 리스트에 달러 사인($)을 입력할 경우, 이름과 함께 리스트가 추가됩니다. 7.3 리스트 추출하기 리스트 역시 대괄호를 이용해 데이터를 추추할 수 있습니다. l2[1] ## [[1]] ## [1] 1 2 3 l2[c(1,3)] ## [[1]] ## [1] 1 2 3 ## ## [[2]] ## [1] TRUE FALSE TRUE 리스트에 이름이 있을 경우, 이를 이용해 추출도 가능합니다. l2[&#39;item4&#39;] ## $item4 ## [1] &quot;new list item&quot; 대괄호를 두번, 혹은 달러 사인을 이용해 데이터를 추출할 경우 결과물의 형태는 단순화되어 나타납니다. l2[[1]] ## [1] 1 2 3 l2$item4 ## [1] &quot;new list item&quot; 특정 리스트에서 항목을 추출하기 위해서는 [[와 [를 함께 사용합니다. l2[[1]] ## [1] 1 2 3 l2[[1]][3] ## [1] 3 "],
["matrix.html", "Chapter 8 Matrix 8.1 행렬 생성하기 8.2 기존 행렬에 데이터 추가하기 8.3 행이름 및 열이름 추가하기 8.4 행렬 추출하기", " Chapter 8 Matrix 8.1 행렬 생성하기 m1 = matrix(1:6, nrow = 2, ncol = 3) m1 ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 matrix() 함수를 이용해 행렬을 생성할 수 있으며, nrow와 ncol을 통해 행과 열 갯수를 지정할 수 있습니다. m2 = matrix(letters[1:6], nrow = 2, ncol = 3) m2 ## [,1] [,2] [,3] ## [1,] &quot;a&quot; &quot;c&quot; &quot;e&quot; ## [2,] &quot;b&quot; &quot;d&quot; &quot;f&quot; 문자 형태로 이루어진 행렬 역시 생성할 수 있습니다. 그러나 숫자와 문자가 한 행렬 내에서 같이 사용될 수는 없습니다. v1 = 1:4 v2 = 5:8 cbind(v1, v2) ## v1 v2 ## [1,] 1 5 ## [2,] 2 6 ## [3,] 3 7 ## [4,] 4 8 rbind(v1, v2) ## [,1] [,2] [,3] [,4] ## v1 1 2 3 4 ## v2 5 6 7 8 cbind() 함수는 열로 데이터를 합치며, rbind() 함수는 행으로 데이터를 합칩니다. 8.2 기존 행렬에 데이터 추가하기 cbind()와 rbind() 함수를 이용해 기존 행렬에 데이터를 추가할 수 있습니다. m1 = cbind(v1, v2) m1 ## v1 v2 ## [1,] 1 5 ## [2,] 2 6 ## [3,] 3 7 ## [4,] 4 8 v3 = 9:12 cbind(m1, v3) ## v1 v2 v3 ## [1,] 1 5 9 ## [2,] 2 6 10 ## [3,] 3 7 11 ## [4,] 4 8 12 8.3 행이름 및 열이름 추가하기 m2 = matrix(1:12, nrow = 4, ncol = 3) m2 ## [,1] [,2] [,3] ## [1,] 1 5 9 ## [2,] 2 6 10 ## [3,] 3 7 11 ## [4,] 4 8 12 rownames(m2) = c(&#39;row1&#39;, &#39;row2&#39;, &#39;row3&#39;, &#39;row4&#39;) m2 ## [,1] [,2] [,3] ## row1 1 5 9 ## row2 2 6 10 ## row3 3 7 11 ## row4 4 8 12 colnames(m2) = c(&#39;col1&#39;, &#39;col2&#39; ,&#39;col3&#39;) m2 ## col1 col2 col3 ## row1 1 5 9 ## row2 2 6 10 ## row3 3 7 11 ## row4 4 8 12 rownames()와 colnames() 함수를 이용해 행 및 열이름을 직접 지정할 수 있습니다. 8.4 행렬 추출하기 행렬 역시 대괄호를 이용해 데이터를 추출할 수 있으며, 공백으로 둘시 모든 행(열)을 선택하게 됩니다. m2 ## col1 col2 col3 ## row1 1 5 9 ## row2 2 6 10 ## row3 3 7 11 ## row4 4 8 12 m2[1:2, ] ## col1 col2 col3 ## row1 1 5 9 ## row2 2 6 10 m2[ , c(1,3)] ## col1 col3 ## row1 1 9 ## row2 2 10 ## row3 3 11 ## row4 4 12 m2[1:2, c(1,3)] ## col1 col3 ## row1 1 9 ## row2 2 10 만일 하나의 열만 선택시 결과가 벡터 형태로 출력되며, drop = FALSE 인자를 추가해주면 행렬의 형태가 유지되어 출력됩니다. m2[, 2] ## row1 row2 row3 row4 ## 5 6 7 8 m2[, 2, drop = FALSE] ## col2 ## row1 5 ## row2 6 ## row3 7 ## row4 8 "],
["data-frame.html", "Chapter 9 Data Frame 9.1 데이터프레임 생성하기 9.2 기존 데이터프레임에 데이터 추가하기 9.3 데이터프레임추출하기", " Chapter 9 Data Frame 데이터프레임은 R에서 가장 널리 사용되는 형식으로써, 각 컬럼이 다른 클래스를 가질 수 있습니다. 9.1 데이터프레임 생성하기 df = data.frame (col1 = 1:3, col2 = c (&quot;this&quot;, &quot;is&quot;, &quot;text&quot;), col3 = c (TRUE, FALSE, TRUE), col4 = c (2.5, 4.2, pi)) str(df) ## &#39;data.frame&#39;: 3 obs. of 4 variables: ## $ col1: int 1 2 3 ## $ col2: Factor w/ 3 levels &quot;is&quot;,&quot;text&quot;,&quot;this&quot;: 3 1 2 ## $ col3: logi TRUE FALSE TRUE ## $ col4: num 2.5 4.2 3.14 col1은 숫자, col2는 팩터, col3는 논리연산자, col4는 숫자로 구성되어 있습니다. R에서는 문자형식을 자동으로 팩터로 인식하며, 이를 원하지 않을 경우 stringsAsFactors = FALSE를 입력합니다. df = data.frame (col1 = 1:3, col2 = c (&quot;this&quot;, &quot;is&quot;, &quot;text&quot;), col3 = c (TRUE, FALSE, TRUE), col4 = c (2.5, 4.2, pi), stringsAsFactors = FALSE) str(df) ## &#39;data.frame&#39;: 3 obs. of 4 variables: ## $ col1: int 1 2 3 ## $ col2: chr &quot;this&quot; &quot;is&quot; &quot;text&quot; ## $ col3: logi TRUE FALSE TRUE ## $ col4: num 2.5 4.2 3.14 또한 벡터 혹은 리스트를 이용해 데이터프레임을 생성할 수도 있습니다. v1 = 1:3 v2 = c (&quot;this&quot;, &quot;is&quot;, &quot;text&quot;) v3 = c (TRUE, FALSE, TRUE) data.frame (col1 = v1, col2 = v2, col3 = v3) ## col1 col2 col3 ## 1 1 this TRUE ## 2 2 is FALSE ## 3 3 text TRUE l = list (item1 = 1:3, item2 = c (&quot;this&quot;, &quot;is&quot;, &quot;text&quot;), item3 = c (2.5, 4.2, 5.1)) l ## $item1 ## [1] 1 2 3 ## ## $item2 ## [1] &quot;this&quot; &quot;is&quot; &quot;text&quot; ## ## $item3 ## [1] 2.5 4.2 5.1 as.data.frame (l) ## item1 item2 item3 ## 1 1 this 2.5 ## 2 2 is 4.2 ## 3 3 text 5.1 9.2 기존 데이터프레임에 데이터 추가하기 cbind() 함수를 통해 기존 데이터프레임에 새로운 열을 추가할 수 있습니다. df ## col1 col2 col3 col4 ## 1 1 this TRUE 2.500 ## 2 2 is FALSE 4.200 ## 3 3 text TRUE 3.142 v4 = c (&quot;A&quot;, &quot;B&quot;, &quot;C&quot;) cbind(df, v4) ## col1 col2 col3 col4 v4 ## 1 1 this TRUE 2.500 A ## 2 2 is FALSE 4.200 B ## 3 3 text TRUE 3.142 C rbind() 함수를 사용할 경우 새로운 행을 추가할 수 있습니다. 주의할 점은 각 행의 클래스가 기존 데이터와 일치해야 합니다. v5 = c (4, &quot;R&quot;, F, 1.1) rbind(df, v5) ## col1 col2 col3 col4 ## 1 1 this TRUE 2.5 ## 2 2 is FALSE 4.2 ## 3 3 text TRUE 3.14159265358979 ## 4 4 R FALSE 1.1 9.3 데이터프레임추출하기 데이터프레임 역시 대괄호를 이용해 데이터를 추출할 수 있으며, 공백으로 둘시 모든 행(열)을 선택하게 됩니다. df ## col1 col2 col3 col4 ## 1 1 this TRUE 2.500 ## 2 2 is FALSE 4.200 ## 3 3 text TRUE 3.142 df[2:3, ] ## col1 col2 col3 col4 ## 2 2 is FALSE 4.200 ## 3 3 text TRUE 3.142 컬럼 이름을 통해 데이터를 선택할 수도있습니다. df[ , c(&#39;col2&#39;, &#39;col4&#39;)] ## col2 col4 ## 1 this 2.500 ## 2 is 4.200 ## 3 text 3.142 만일 하나의 열만 선택시 결과가 벡터 형태로 출력되며, drop = FALSE 인자를 추가해주면 데이터프레임의 형태가 유지되어 출력됩니다. df[, 2] ## [1] &quot;this&quot; &quot;is&quot; &quot;text&quot; df[, 2, drop = FALSE] ## col2 ## 1 this ## 2 is ## 3 text "]
]
